---

---

<div id="mute-container">
  
  <img id ="mute-button" src="play-pause-button.svg" alt="Play/Pause Button"/>
  <canvas id="canvas"> </canvas>
</div>
<script>
  import block from "../assets/wav/block.wav";
  import { metronome } from "../stores";
  import * as Tone from "tone";
  import _ from "lodash";

  const container = document.getElementById("mute-container");

  const muteController = document.getElementById("mute-button");

  if (muteController) {
    muteController.onmouseenter = function () {
      Tone.start();
    };
  }

  console.log(`metronome: ${JSON.stringify(metronome.get())}`);

  metronome.subscribe((conf) => {
    if (container && muteController) {
      muteController.onclick = function () {
        console.log(`current conf: ${JSON.stringify(conf)}`);
        const metronomeAudioPlayer: Tone.Player = new Tone.Player({
          loop: false,
          onerror: (err) => Promise.reject(err),
          onload: () => Promise.resolve(metronomeAudioPlayer),
          url: block,
        });

        metronomeAudioPlayer.toDestination();
        Tone.Transport.bpm.value = conf.bpm;
        if (!conf.isPlaying) {
          console.log("starting tone");
          
          Tone.Transport.stop().start();
          const scheduleId = Tone.Transport.scheduleRepeat(function (time) {
            metronomeAudioPlayer.start();
            const currColor = muteController.style.backgroundColor;
            switch (currColor) {
              case "red": {
                muteController.style.backgroundColor = "black";
              }
              case "black": {
                muteController.style.backgroundColor = "red";
              }
            }
            console.log("playing audio", time);
          }, "4n");

          metronome.set(
            _.merge(metronome.get(), {
              isPlaying: true,
            })
          );
        } else {
          metronomeAudioPlayer.stop().dispose();
          console.log(`Attempting to stop tone`);
          Tone.Transport.stop();
          Tone.Transport.cancel(0);
          metronome.set(_.merge(metronome.get(), { isPlaying: false }));
        }
      };
    }
  });
</script>
<style>
  #mute-button {
    width: 4em;
    height: 4em;
    border-radius: 50%;
    cursor: pointer;
  }
  #mute-container {
    background-color: gray;
  }
</style>
